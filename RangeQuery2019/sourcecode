/******************************************************************************

                            Online Java Compiler.
                Code, Compile, Run and Debug java program online.
Write your code in this editor and press "Run" button to execute it.

*******************************************************************************/
import java.util.BitSet;
import java.util.Vector;
import java.util.ArrayList;

public class Main
{
    
    public static int HammingWeight(int n) {
        int count = 0;
        if (n==0) return 0;
        int loop = (int) (Math.log(n)/Math.log(2));
        //System.out.print(loop);
        for (int i = 0; i <=loop ; ++i) {
            if (((n >>> i) & 1) == 1) {
                ++count;
                }
        }
        return count;
    }
    
    public static int HammingWeight(String n) {
        int count = 0;
        for(int i=0; i<n.length(); i++){
            if (n.charAt(i) =='1') count++;
        }
        return count;
    }    

    public static String Cumulative(String strIn){
        StringBuilder strResult = new StringBuilder("");
	    strResult.append(strIn.charAt(0));
	    int intTemp=0;
	    for(int i=1; i<strIn.length(); i++){
	        intTemp = Character.getNumericValue(strResult.charAt(i-1)) + Character.getNumericValue(strIn.charAt(i));
	        strResult.append(intTemp);
	    }
	    return strResult.toString();
    }    
  public static BitSet convert(long value) {
    BitSet bits = new BitSet();
    int index = 0;
    while (value != 0L) {
      if (value % 2L != 0) {
        bits.set(index);
      }
      ++index;
      value = value >>> 1;
    }
    return bits;
  }

  public static long convert2(BitSet bits) {
    long value = 0L;
    for (int i = 0; i < bits.length(); ++i) {
      value += bits.get(i) ? (1L << i) : 0L;
    }
    return value;
  }
    public static String convert3(BitSet bits) {
    String value = "";
    for (int i = 0; i < bits.length(); ++i) {
      value += bits.get(i) ? "1" : "0";
    }
    return value;
  }


      
	public static void main(String[] args) {
	   /*
	    for(int i=0;i<64;i++){
	        System.out.println(Integer.toBinaryString(64|i).substring(1) +"  "+HammingWeight(i));
	    }
		*/
		
		//System.exit(0);
		
		
		int n = 32; //data value range; 0 <= L <= B < n-1
		int b = (int) (Math.log(32)/Math.log(2));
        int L = 7;  //L >= 0
	    int U = 10; //U <= n-1
	    
	    System.out.println("n: " + n);
	    System.out.println("b: " + b);
	    System.out.println("Lower bound: " + L);
	    System.out.println("Upper bound: " + U);
	    
	    ArrayList<String> QRange = new ArrayList<String>();
	    //BitSet bs = new BitSet();
	    String strTemp="";
	    for(int i=L; i<=U; i++){
	        strTemp = Integer.toBinaryString(n|i).substring(1);
	        QRange.add(strTemp);
	    }
	    
	    System.out.println("Query range (binary representation): ");
	    for (String Q : QRange) {
	        System.out.print(Q+", ");
	    }
	    System.out.println();
	    
	    System.out.println("Hamming weights: ");
	    for (String Q : QRange) {
	        System.out.print("    "+ HammingWeight(Q) + ", ");
	    }

	    ArrayList<ArrayList<String>> S = new ArrayList<ArrayList<String>>();
	    ArrayList<String> SElement = new ArrayList<String>();
	    for(int i=0; i<=b; i++){
	        S.add(i, SElement);
	    }
	    System.out.println("");
	    System.out.println("S: ");
	    
        int intIndex = 0;
        for(int i=0; i<=b; i++){
            SElement = new ArrayList<String>();
            for (String Q : QRange){
                intIndex = HammingWeight(Q);
                if (intIndex == i){
                    SElement.add(Q);
                }
            }
            S.set(i,SElement);
        }
/*
	    for (String Q : QRange) {
	        
	        System.out.print("    " + intIndex + ", ");
	        S.get(intIndex).add(Q);
	        System.out.println(S);
	        
	        break;
	    }
	    System.out.println();
	    System.out.println("S: ");
	    */
	    System.out.println(S);
	   
	  
	  
	  
	  
	  
	}
}

